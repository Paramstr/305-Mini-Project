LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE  IEEE.STD_LOGIC_ARITH.all;
USE  IEEE.STD_LOGIC_SIGNED.all;


ENTITY bouncy_ball IS
	PORT
		( pb1, pb2, clk, vert_sync, mouse_click: IN std_logic;
          pixel_row, pixel_column	: IN std_logic_vector(9 DOWNTO 0);
		  red, green, blue 			: OUT std_logic);		
END bouncy_ball;

architecture behavior of bouncy_ball is

--Signals for the ball
SIGNAL ball_on					: std_logic;
SIGNAL size 					: std_logic_vector(9 DOWNTO 0);  
SIGNAL ball_y_pos				: std_logic_vector(9 DOWNTO 0);
SiGNAL ball_x_pos				: std_logic_vector(10 DOWNTO 0);
SIGNAL ball_y_motion			: std_logic_vector(9 DOWNTO 0);

--signals for the pipe
SIGNAL pipe_on					: std_logic;
SIGNAL size_pipe 				: std_logic_vector(9 DOWNTO 0);  
SIGNAL pipe_y_pos				: std_logic_vector(9 DOWNTO 0);
SIGNAL pipe_x_pos				: std_logic_vector(10 DOWNTO 0);
SIGNAL pipe_x_motion			: std_logic_vector(9 DOWNTO 0);

--signals for mouse input(needed for ball movement)
SIGNAL moving 					: std_logic;

BEGIN           

size <= CONV_STD_LOGIC_VECTOR(8,10);
-- ball_x_pos and ball_y_pos show the (x,y) for the centre of ball
ball_x_pos <= CONV_STD_LOGIC_VECTOR(128,11);

ball_on <= '1' when ( ('0' & ball_x_pos <= '0' & pixel_column + size) and ('0' & pixel_column <= '0' & ball_x_pos + size) 	-- x_pos - size <= pixel_column <= x_pos + size
					and ('0' & ball_y_pos <= pixel_row + size) and ('0' & pixel_row <= ball_y_pos + size) )  else	-- y_pos - size <= pixel_row <= y_pos + size
			'0';

size_pipe <= CONV_STD_LOGIC_VECTOR(50,10);
-- ball_x_pos and ball_y_pos show the (x,y) for the centre of ball

pipe_y_pos <= CONV_STD_LOGIC_VECTOR(240,10);

pipe_on <= '1' WHEN ('0' & pipe_x_pos - size_pipe <= '0' & pixel_column) AND
					   ('0' & pixel_column <= '0' & pipe_x_pos + size_pipe) AND
					   ('0' & pipe_y_pos - size_pipe <= '0' & pixel_row) AND
					   ('0' & pixel_row <= '0' & pipe_y_pos + size_pipe) ELSE
			  '0';

-- Combine ball and pipe signals to generate output color
Red <= (pb1 or ball_on) and not pipe_on;
Green <= (not pb2 and not ball_on and not pipe_on) or pipe_on;
Blue <= not ball_on and not pipe_on;


moving <= '1' when mouse_click = '1';

Move_Ball: process (vert_sync)  	
begin
	-- Move ball once every vertical sync
	if (rising_edge(vert_sync)) then			
		-- Bounce off top or bottom of the screen
		--if ( ('0' & ball_y_pos >= CONV_STD_LOGIC_VECTOR(479,10) - size) ) then
			--ball_y_motion <= - CONV_STD_LOGIC_VECTOR(2,10);
		--elsif (ball_y_pos <= size) then 
			--ball_y_motion <= CONV_STD_LOGIC_VECTOR(2,10);
		if(mouse_click = '1') then
			ball_y_motion <= -CONV_STD_LOGIC_VECTOR(4,10);
		else
			if(ball_y_pos>= 469) then
				ball_y_motion<= CONV_STD_LOGIC_VECTOR(0, 10);
			else
			ball_y_motion <= CONV_STD_LOGIC_VECTOR(1,10);
			end if;
		end if;
		-- Compute next ball Y position
		ball_y_pos <= ball_y_pos + ball_y_motion;
	end if;
end process Move_Ball;

move_pipe:process(vert_sync)
begin
if (rising_edge(vert_sync)) then	--trying to just update on horiz_sync rising edge apparently 		
		-- Bounce off top or bottom of the screen
		if(moving = '1') then
		if ( ('0' & pipe_x_pos >= CONV_STD_LOGIC_VECTOR(639,11) - size_pipe) ) then
			pipe_x_motion <= - CONV_STD_LOGIC_VECTOR(2,10);
		elsif (pipe_x_pos <= size_pipe) then 
			pipe_x_motion <= CONV_STD_LOGIC_VECTOR(2,10);
		end if;
		-- Compute next ball Y position
		pipe_x_pos <= pipe_x_pos + pipe_x_motion;
	end if;	
	end if;
end process move_pipe;

END behavior;

